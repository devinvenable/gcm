#!/usr/bin/env bash
#
# gcm: A Git commit replacement tool that:
#   1. Collects the Git diff in the current directory (staged changes).
#   2. Searches for a .env file (up to 3 parent levels) containing API keys.
#   3. Calls Gemini API (preferred) or OpenAI API (fallback) to summarize the changes.
#   4. Commits the code with the generated summary.
#
# This version includes support for both Gemini and OpenAI APIs.

###############################################################################
# Utility function: Print error message to stderr and exit
###############################################################################
error_exit() {
  echo "[ERROR] $1" >&2
  exit 1
}

###############################################################################
# Step 1: Capture Git diff of staged changes
###############################################################################
# Use --function-context to provide the LLM with the full context of changed functions.
diff_data=$(git diff --staged --function-context)
if [ -z "$diff_data" ]; then
  echo "No staged changes found. Please stage them with \`git add\` first."
  exit 1
fi

###############################################################################
# Step 2: Set or locate API keys
###############################################################################
# First check the environment variables
api_provider=""

# Find all .env files in the directory tree
found_env_files=()
search_dirs=("./" "../" "../../" "../../../" "../../../../../")
for dir in "${search_dirs[@]}"; do
  candidate="${dir}.env"
  if [[ -f "$candidate" ]]; then
    found_env_files+=("$candidate")
  fi
done

# If none found yet, do a broader find (up to 3 levels).
if [[ ${#found_env_files[@]} -eq 0 ]]; then
  IFS=$'\n'
  for candidate in $(find ../../../ -maxdepth 3 -type f -name ".env" 2>/dev/null); do
    found_env_files+=("$candidate")
  done
  unset IFS
fi

# Sort .env files by proximity to current directory (closest first)
# and source them one by one until we have the keys we need
api_provider=""
for env_file in "${found_env_files[@]}"; do
  echo "Loading API keys from $env_file"
  set -a
  # shellcheck source=/dev/null
  . "$env_file"
  set +a

  # Check if we have the keys we need after sourcing this file
  if [[ -n "$GEMINI_API_KEY" ]]; then
    api_provider="gemini"
    echo "Found Gemini API key in $env_file"
    break
  elif [[ -n "$OPENAI_API_KEY" && -z "$api_provider" ]]; then
    api_provider="openai"
    echo "Found OpenAI API key in $env_file"
    # Don't break yet - we might find a Gemini key in another file
  fi
done

# Final decision on which API to use (prefer Gemini over OpenAI)
if [[ "$api_provider" == "gemini" ]]; then
  echo "Using Gemini API"
elif [[ "$api_provider" == "openai" ]]; then
  echo "Using OpenAI API (Gemini API key not found)"
else
  error_exit "Neither GEMINI_API_KEY nor OPENAI_API_KEY is defined in environment or in any .env file."
fi

###############################################################################
# Step 3: Create the prompt text
###############################################################################
# This prompt is more explicit, guiding the LLM to analyze the function context diff
# more reliably and improving the accuracy of the added/removed functions list.
read -r -d '' prompt <<EOF
You are a helpful coding assistant. Please read the following Git diff and generate a concise and accurate commit message.

The first line of your output should be a single sentence that summarizes the entire change.

After the main summary, you will add a list of functions.

**IMPORTANT RULE:** If NO functions were added or removed, you MUST NOT include the "**Functions Added:**" or "**Functions Removed:**" headings in your output. Do not write "None" or any other placeholder. The section must be omitted entirely.

If and only if functions were added or removed, include them under the exact headings "**Functions Added:**" and "**Functions Removed:**", followed by a bulleted list of function names.

- A function is **added** if its entire definition is new (all its lines start with '+').
- A function is **removed** if its entire definition is deleted (all its lines start with '-').
- If a function was only modified, do not list it.

Here is the diff:

$diff_data
EOF

###############################################################################
# Step 4: Safely convert 'prompt' into a JSON string
###############################################################################
# Option A: If you have jq installed, do:
if command -v jq >/dev/null 2>&1; then
  prompt_json=$(printf '%s' "$prompt" | jq -Rs .)
else
  # Option B: If jq is not available but Python is:
  # We read from stdin, load into Python string, and dump as JSON.
  prompt_json=$(python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))' <<< "$prompt")
fi

if [[ -z "$prompt_json" ]]; then
  error_exit "Failed to JSON-encode prompt (missing jq or Python?)."
fi

###############################################################################
# Step 5: Construct the JSON payload based on API provider
###############################################################################
if [[ "$api_provider" == "gemini" ]]; then
  json_payload=$(cat <<EOF
{
  "contents": [
    {
      "role": "user",
      "parts": [
        {
          "text": $prompt_json
        }
      ]
    }
  ],
  "generationConfig": {
    "temperature": 0.7
  }
}
EOF
)
else # openai
  json_payload=$(cat <<EOF
{
  "model": "gpt-4o-mini",
  "messages": [
    {
      "role": "user",
      "content": $prompt_json
    }
  ],
  "temperature": 0.7
}
EOF
)
fi

###############################################################################
# Step 6: Print debug info
###############################################################################
#echo "[DEBUG] JSON Payload to $api_provider API (below):"
#echo "----------------------------------------------------------------------"
#echo "$json_payload"
#echo "----------------------------------------------------------------------"

###############################################################################
# Step 7: Make the API request based on provider
###############################################################################
commit_summary=""
gemini_error=""
openai_error=""
api_success=false

if [[ "$api_provider" == "gemini" ]]; then
  # Try Gemini API first
  echo "Trying Gemini API..."
  gemini_response=$(curl -s \
    -H "Content-Type: application/json" \
    -d "$json_payload" \
    "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=$GEMINI_API_KEY")

  # Check if Gemini response contains error
  if [[ $gemini_response == *"error"* && $gemini_response != *"candidates"* ]]; then
    gemini_error=$(echo "$gemini_response" | grep -o '"message":"[^"]*"' | head -1 | sed 's/"message":"\(.*\)"/\1/g')
    echo "Gemini API error: $gemini_error"
    echo "Full Gemini response: $gemini_response"
    # Try to extract more detailed error information
    if command -v jq >/dev/null 2>&1; then
      echo "Gemini API error details:"
      echo "$gemini_response" | jq '.error.details[] | .["@type"], .message' 2>/dev/null || echo "No detailed error information available"
    else
      echo "Install jq for more detailed error information"
    fi

    # Only fall back to OpenAI if OPENAI_API_KEY is available
    if [[ -n "$OPENAI_API_KEY" ]]; then
      echo "Falling back to OpenAI API..."
      # Construct OpenAI payload
      openai_payload=$(cat <<EOF
{
  "model": "gpt-4o-mini",
  "messages": [
    {
      "role": "user",
      "content": $prompt_json
    }
  ],
  "temperature": 0.7
}
EOF
)
      # Make OpenAI request
      openai_response=$(curl -s \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -d "$openai_payload" \
        https://api.openai.com/v1/chat/completions)

      # Check if OpenAI response contains error
      if [[ $openai_response == *"error"* && $openai_response != *"choices"* ]]; then
        openai_error=$(echo "$openai_response" | grep -o '"message":"[^"]*"' | head -1 | sed 's/"message":"\(.*\)"/\1/g')
        echo "OpenAI API error: $openai_error"
        echo "Full OpenAI response: $openai_response"

        # Only fall back to Gemini if GEMINI_API_KEY is available
      else
        # Parse OpenAI response
        response=$openai_response
        echo "OpenAI response received successfully."

        if command -v jq >/dev/null 2>&1; then
          echo "Using jq to parse response"
          commit_summary=$(echo "$response" | jq -r '.choices[0].message.content // empty')
        else
          echo "Using grep to parse response"
          # Extract using Python for better JSON handling when jq is not available
          if command -v python3 >/dev/null 2>&1; then
            echo "Using python3 for JSON parsing"
            commit_summary=$(python3 -c "
import json, sys
try:
    data = json.loads(sys.stdin.read())
    print(data['choices'][0]['message']['content'])
except Exception as e:
    print(f'Error parsing JSON: {e}', file=sys.stderr)
    exit(1)
" <<< "$response")
          else
            # Fallback to basic grep, but this may not handle complex JSON well
            echo "Fallback to basic grep (limited JSON handling)"
            commit_summary=$(echo "$response" \
              | grep -o '"content": *"[^"]*' \
              | head -1 \
              | sed 's/"content": *"\(.*\)/\1/g' \
              | sed 's/\\"/"/g')  # Unescape quotes
          fi
        fi

        echo "Extracted commit message: $commit_summary"
        if [[ -n "$commit_summary" ]]; then
          api_success=true
          echo "Successfully extracted commit message from OpenAI"
        else
          echo "Failed to extract commit message from OpenAI response."
        fi
      fi
    else
      echo "OpenAI API key is not available."
    fi
  else
    # Parse successful Gemini response
    response=$gemini_response
    echo "Gemini response received successfully."

    if command -v jq >/dev/null 2>&1; then
      echo "Using jq to parse response"
      commit_summary=$(echo "$response" | jq -r '.candidates[0].content.parts[0].text // empty')
    else
      echo "Using grep to parse response"
      # Extract using Python for better JSON handling when jq is not available
      if command -v python3 >/dev/null 2>&1; then
        echo "Using python3 for JSON parsing"
        commit_summary=$(python3 -c "
import json, sys
try:
    data = json.loads(sys.stdin.read())
    print(data['candidates'][0]['content']['parts'][0]['text'])
except Exception as e:
    print(f'Error parsing JSON: {e}', file=sys.stderr)
    exit(1)
" <<< "$response")
      else
        # Fallback to basic grep, but this may not handle complex JSON well
        echo "Fallback to basic grep (limited JSON handling)"
        commit_summary=$(echo "$response" \
          | grep -o '"text":"[^"]*"' \
          | head -1 \
          | sed 's/"text":"\(.*\)"/\1/g')
      fi
    fi

    echo "Extracted commit message: $commit_summary"
    if [[ -n "$commit_summary" ]]; then
      api_success=true
      echo "Successfully extracted commit message from Gemini"
    else
      echo "Failed to extract commit message from Gemini response."
    fi
  fi
else # openai as primary choice
  echo "Trying OpenAI API..."
  openai_response=$(curl -s \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d "$json_payload" \
    https://api.openai.com/v1/chat/completions)

  # Check if OpenAI response contains error
  if [[ $openai_response == *"error"* && $openai_response != *"choices"* ]]; then
    openai_error=$(echo "$openai_response" | grep -o '"message":"[^"]*"' | head -1 | sed 's/"message":"\(.*\)"/\1/g')
    echo "OpenAI API error: $openai_error"
    echo "Full OpenAI response: $openai_response"

    # Only fall back to Gemini if GEMINI_API_KEY is available
    if [[ -n "$GEMINI_API_KEY" ]]; then
      echo "Falling back to Gemini API..."
      gemini_response=$(curl -s \
        -H "Content-Type: application/json" \
        -d "$json_payload" \
        "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=$GEMINI_API_KEY")

      # Check if Gemini response contains error
      if [[ $gemini_response == *"error"* && $gemini_response != *"candidates"* ]]; then
        gemini_error=$(echo "$gemini_response" | grep -o '"message":"[^"]*"' | head -1 | sed 's/"message":"\(.*\)"/\1/g')
        echo "Gemini API error: $gemini_error"
        echo "Full Gemini response: $gemini_response"
        # Try to extract more detailed error information
        if command -v jq >/dev/null 2>&1; then
          echo "Gemini API error details:"
          echo "$gemini_response" | jq '.error.details[] | .["@type"], .message' 2>/dev/null || echo "No detailed error information available"
        else
          echo "Install jq for more detailed error information"
        fi

      else
        # Parse successful Gemini response
        response=$gemini_response
        echo "Gemini response received successfully."

        if command -v jq >/dev/null 2>&1; then
          echo "Using jq to parse response"
          commit_summary=$(echo "$response" | jq -r '.candidates[0].content.parts[0].text // empty')
        else
          echo "Using grep to parse response"
          # Extract using Python for better JSON handling when jq is not available
          if command -v python3 >/dev/null 2>&1; then
            echo "Using python3 for JSON parsing"
            commit_summary=$(python3 -c "
import json, sys
try:
    data = json.loads(sys.stdin.read())
    print(data['candidates'][0]['content']['parts'][0]['text'])
except Exception as e:
    print(f'Error parsing JSON: {e}', file=sys.stderr)
    exit(1)
" <<< "$response")
          else
            # Fallback to basic grep, but this may not handle complex JSON well
            echo "Fallback to basic grep (limited JSON handling)"
            commit_summary=$(echo "$response" \
              | grep -o '"text":"[^"]*"' \
              | head -1 \
              | sed 's/"text":"\(.*\)"/\1/g')
          fi
        fi

        echo "Extracted commit message: $commit_summary"
        if [[ -n "$commit_summary" ]]; then
          api_success=true
          echo "Successfully extracted commit message from Gemini"
        else
          echo "Failed to extract commit message from Gemini response."
        fi
      fi
    else
      echo "Gemini API key is not available."
    fi
  else
    # Parse OpenAI response
    response=$openai_response
    echo "OpenAI response received successfully."

    if command -v jq >/dev/null 2>&1; then
      echo "Using jq to parse response"
      commit_summary=$(echo "$response" | jq -r '.choices[0].message.content // empty')
    else
      echo "Using grep to parse response"
      # Extract using Python for better JSON handling when jq is not available
      if command -v python3 >/dev/null 2>&1; then
        echo "Using python3 for JSON parsing"
        commit_summary=$(python3 -c "
import json, sys
try:
    data = json.loads(sys.stdin.read())
    print(data['choices'][0]['message']['content'])
except Exception as e:
    print(f'Error parsing JSON: {e}', file=sys.stderr)
    exit(1)
" <<< "$response")
      else
        # Fallback to basic grep, but this may not handle complex JSON well
        echo "Fallback to basic grep (limited JSON handling)"
        commit_summary=$(echo "$response" \
          | grep -o '"content": *"[^"]*' \
          | head -1 \
          | sed 's/"content": *"\(.*\)/\1/g' \
          | sed 's/\\"/"/g')  # Unescape quotes
      fi
    fi

    echo "Extracted commit message: $commit_summary"
    if [[ -n "$commit_summary" ]]; then
      api_success=true
      echo "Successfully extracted commit message from OpenAI"
    else
      echo "Failed to extract commit message from OpenAI response."
    fi
  fi
fi

# Handle case where both APIs failed
if [[ "$api_success" == "false" ]]; then
  echo "Both APIs failed to generate a commit message."
  echo "Gemini error: $gemini_error"
  echo "OpenAI error: $openai_error"

  # Ask user if they want to continue with a manual commit message
  echo "Do you want to enter a commit message manually? (y/n)"
  read -r user_choice

  if [[ "$user_choice" == "y" || "$user_choice" == "Y" ]]; then
    echo "Enter your commit message:"
    read -r commit_summary

    if [[ -z "$commit_summary" ]]; then
      error_exit "No commit message provided."
    fi
  else
    error_exit "Aborting commit due to API failures."
  fi
else
  echo "Successfully generated commit message."
fi

###############################################################################
# Step 8: Clean up the generated commit message
###############################################################################
# This awk script removes a header (e.g., "**Functions Added:**") if it is
# immediately followed by a line containing only a "- None" list item.
commit_summary=$(echo "$commit_summary" | awk '
  /^[[:space:]]*\*\*Functions (Added|Removed):\*\*[[:space:]]*$/ {
    buffer = $0;
    if (getline > 0) {
      if ($0 ~ /^[[:space:]]*-[[:space:]]+None[[:space:]]*$/) {
        next;
      } else {
        print buffer;
      }
    } else {
      print buffer;
    }
  }
  { print }
')

# Remove any trailing blank lines that might result from the deletion.
commit_summary=$(echo "$commit_summary" | sed -e :a -e '/^\n*$/{$d;N;};/\n$/ba')


###############################################################################
# Step 9: Commit with the generated summary
###############################################################################
echo "Committing with message:"
echo "--------------------------------------------------"
echo "$commit_summary"
echo "--------------------------------------------------"
git commit -m "$commit_summary"
