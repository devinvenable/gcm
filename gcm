#!/usr/bin/env bash
#
# gcm: A Git commit replacement tool that:
#   1. Collects the Git diff in the current directory (staged changes).
#   2. Searches for a .env file (up to 3 parent levels) containing OPENAI_API_KEY.
#   3. Calls OpenAI's Chat Completion API to summarize the changes.
#   4. Commits the code with the generated summary.
#
# This version includes debug output AND robust JSON escaping.

###############################################################################
# Utility function: Print error message to stderr and exit
###############################################################################
error_exit() {
  echo "[ERROR] $1" >&2
  exit 1
}

###############################################################################
# Step 1: Capture Git diff of staged changes
###############################################################################
diff_data=$(git diff --staged)
if [ -z "$diff_data" ]; then
  echo "No staged changes found. Please stage them with \`git add\` first."
  exit 1
fi

###############################################################################
# Step 2: Locate .env file containing OPENAI_API_KEY (up to 5 levels)
###############################################################################
env_file=""
search_dirs=("./" "../" "../../" "../../../" "../../../../../")
for dir in "${search_dirs[@]}"; do
  candidate="${dir}.env"
  if [[ -f "$candidate" ]]; then
    if grep -q 'OPENAI_API_KEY' "$candidate"; then
      env_file="$candidate"
      break
    fi
  fi
done

# If not found yet, do a broader find (up to 3 levels).
if [[ -z "$env_file" ]]; then
  IFS=$'\n'
  for candidate in $(find ../../../ -maxdepth 3 -type f -name ".env" 2>/dev/null); do
    if grep -q 'OPENAI_API_KEY' "$candidate"; then
      env_file="$candidate"
      break
    fi
  done
  unset IFS
fi

if [[ -z "$env_file" ]]; then
  error_exit "Could not find a .env file with OPENAI_API_KEY (checked up to 3 levels up)."
fi

# Source the .env file to load OPENAI_API_KEY
set -a
# shellcheck source=/dev/null
. "$env_file"
set +a

if [[ -z "$OPENAI_API_KEY" ]]; then
  error_exit "OPENAI_API_KEY is not defined in $env_file."
fi

###############################################################################
# Step 3: Create the prompt text
###############################################################################
# We'll store the entire diff plus instructions in a single variable, then
# pass it to `jq` or Python to safely encode it into JSON.

read -r -d '' prompt <<EOF
You are a helpful coding assistant. Please read the following Git diff and provide a concise summary of the changes suitable for a commit message. Also, list functions that were added or removed. On first line, do not use the word "summary" but instead use a single sentence that encapsulates or generalizes the entire commit. On subsequent lines you can go into more detail.

Diff:
$diff_data
EOF

###############################################################################
# Step 4: Safely convert 'prompt' into a JSON string
###############################################################################
# Option A: If you have jq installed, do:
if command -v jq >/dev/null 2>&1; then
  prompt_json=$(printf '%s' "$prompt" | jq -Rs .)
else
  # Option B: If jq is not available but Python is:
  # We read from stdin, load into Python string, and dump as JSON.
  prompt_json=$(python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))' <<< "$prompt")
fi

if [[ -z "$prompt_json" ]]; then
  error_exit "Failed to JSON-encode prompt (missing jq or Python?)."
fi

###############################################################################
# Step 5: Construct the full JSON payload
###############################################################################
json_payload=$(cat <<EOF
{
  "model": "gpt-3.5-turbo",
  "messages": [
    {
      "role": "system",
      "content": "You are a helpful assistant specialized in writing concise commit messages."
    },
    {
      "role": "user",
      "content": $prompt_json
    }
  ],
  "temperature": 0.7
}
EOF
)

###############################################################################
# Step 6: Print debug info
###############################################################################
#echo "[DEBUG] JSON Payload to OpenAI (below):"
#echo "----------------------------------------------------------------------"
#echo "$json_payload"
#echo "----------------------------------------------------------------------"

###############################################################################
# Step 7: Make the API request
###############################################################################
response=$(curl -s \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -d "$json_payload" \
  https://api.openai.com/v1/chat/completions )

###############################################################################
# Step 8: Parse the response to extract the generated content
###############################################################################
# If you have jq installed, itâ€™s much cleaner:
if command -v jq >/dev/null 2>&1; then
  commit_summary=$(echo "$response" | jq -r '.choices[0].message.content // empty')
else
  # Fallback to grep + sed if jq not available
  commit_summary=$(echo "$response" \
    | grep -o '"content":"[^"]*"' \
    | sed 's/"content":"\(.*\)"/\1/g')
fi

if [[ -z "$commit_summary" ]]; then
  error_exit "OpenAI API did not return a commit summary. Response: $response"
fi

###############################################################################
# Step 9: Commit with the generated summary
###############################################################################
git commit -m "$commit_summary"

